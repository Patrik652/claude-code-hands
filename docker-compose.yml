version: '3.8'

services:
  # Main application
  claude-vision-hands:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: claude-vision-hands
    restart: unless-stopped
    environment:
      # API Keys (use .env file)
      - GEMINI_API_KEY=${GEMINI_API_KEY}

      # System Configuration
      - CLAUDE_VISION_MODE=production
      - LOG_LEVEL=INFO
      - DATA_DIR=/data

      # Security
      - SECURITY_STRICT_MODE=true
      - RATE_LIMIT_ENABLED=true

      # ChromaDB Configuration
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000

      # Redis Configuration (optional)
      - REDIS_HOST=redis
      - REDIS_PORT=6379

    ports:
      - "8080:8080"  # MCP Server
      - "8081:8081"  # API Server

    volumes:
      # Persistent data
      - ./data:/data
      - ./config:/app/config:ro
      - ./logs:/data/logs

    depends_on:
      - chromadb
      - redis

    networks:
      - claude-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: claude-chromadb
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenConfigServerAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_TOKEN:-default-token}
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token

    ports:
      - "8000:8000"

    volumes:
      - chroma-data:/chroma/chroma

    networks:
      - claude-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-default-password}

    ports:
      - "6379:6379"

    volumes:
      - redis-data:/data

    networks:
      - claude-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

    ports:
      - "9090:9090"

    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    networks:
      - claude-network

    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

    ports:
      - "3000:3000"

    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    depends_on:
      - prometheus

    networks:
      - claude-network

    profiles:
      - monitoring

volumes:
  chroma-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  claude-network:
    driver: bridge
